generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String    @unique
    password      String?
    image         String?
    expireAt      DateTime?
    paid          Boolean   @default(false)
    payments      Payment[] @relation("UserPayments")
    courses       Course[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    emailVerified DateTime?

    accounts Account[]
    sessions Session[]
    queries  Query[]
}

model Hitbullseye {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    data Json
}

model Perfectice {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    data Json
}

enum Course {
    C1001
    C1002
    C1003
    C2001
    C2002
    C2003
    C2004
    C2005
    C2006
}

model Payment {
    id                  String        @id @default(auto()) @map("_id") @db.ObjectId
    razorpay_payment_id String?
    razorpay_signature  String?
    razorpay_order_id   String
    course              Course
    status              PaymentStatus @default(PENDING)
    userId              String        @map("user_id") @db.ObjectId
    user                User          @relation("UserPayments", fields: [userId], references: [id])
    createdAt           DateTime?     @default(now())
}

enum PaymentStatus {
    PENDING
    SUCCESS
    FAILED
}

model Query {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    userId    String?     @db.ObjectId
    user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
    message   String      @db.String
    status    QueryStatus @default(PENDING)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

enum QueryStatus {
    PENDING
    RESOLVED
    ERROR
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
